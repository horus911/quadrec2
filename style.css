<script>
(() => {
  const textInput = document.getElementById("textInput");
  const imageInput = document.getElementById("imageInput");
  const audioInput = document.getElementById("audioInput");
  const videoInput = document.getElementById("videoInput");

  const startAudioRecBtn = document.getElementById("startAudioRec");
  const stopAudioRecBtn = document.getElementById("stopAudioRec");
  const startVideoRecBtn = document.getElementById("startVideoRec");
  const stopVideoRecBtn = document.getElementById("stopVideoRec");

  const filesList = document.getElementById("filesList");
  const shareLink = document.getElementById("shareLink");
  const addToAnyDiv = document.getElementById("a2a_share_buttons");

  let mediaRecorderAudio = null;
  let mediaRecorderVideo = null;
  let audioChunks = [];
  let videoChunks = [];
  let filesData = []; // {name,type,dataUrl}

  function updateShareLink() {
    const data = {
      text: textInput.value,
      files: filesData
    };
    try {
      const encoded = encodeURIComponent(JSON.stringify(data));
      const url = window.location.origin + window.location.pathname + "?data=" + encoded;
      shareLink.value = url;

      // Update AddToAny URL
      addToAnyDiv.setAttribute("data-a2a-url", url);
      if(window.a2a) window.a2a.init_all();

    } catch (e) {
      shareLink.value = "Erreur lors de la génération du lien";
    }
  }

  function addFile(name, type, dataUrl) {
    filesData.push({name, type, dataUrl});
    renderFilesList();
    updateShareLink();
  }

  function removeFile(index) {
    filesData.splice(index, 1);
    renderFilesList();
    updateShareLink();
  }

  function renderFilesList() {
    filesList.innerHTML = "";
    filesData.forEach((file, i) => {
      const li = document.createElement("li");
      const span = document.createElement("span");
      span.textContent = file.name;
      li.appendChild(span);
      const btn = document.createElement("button");
      btn.textContent = "Supprimer";
      btn.onclick = () => removeFile(i);
      li.appendChild(btn);
      filesList.appendChild(li);
    });
  }

  function handleFilesInput(files) {
    for(let f of files){
      const reader = new FileReader();
      reader.onload = e => {
        addFile(f.name, f.type, e.target.result);
      };
      reader.readAsDataURL(f);
    }
  }

  // Inputs file handlers
  imageInput.addEventListener("change", e => {
    if(e.target.files.length > 0){
      handleFilesInput(e.target.files);
      e.target.value = "";
    }
  });
  audioInput.addEventListener("change", e => {
    if(e.target.files.length > 0){
      handleFilesInput(e.target.files);
      e.target.value = "";
    }
  });
  videoInput.addEventListener("change", e => {
    if(e.target.files.length > 0){
      handleFilesInput(e.target.files);
      e.target.value = "";
    }
  });

  // Text input handler
  textInput.addEventListener("input", updateShareLink);

  // MediaRecorder audio
  startAudioRecBtn.onclick = () => {
    navigator.mediaDevices.getUserMedia({audio:true})
      .then(stream => {
        mediaRecorderAudio = new MediaRecorder(stream);
        audioChunks = [];
        mediaRecorderAudio.ondataavailable = e => {
          audioChunks.push(e.data);
        };
        mediaRecorderAudio.onstop = e => {
          const blob = new Blob(audioChunks, {type:'audio/webm'});
          const reader = new FileReader();
          reader.onload = e => {
            addFile("audio_enregistre.webm","audio/webm", e.target.result);
          };
          reader.readAsDataURL(blob);
        };
        mediaRecorderAudio.start();
        startAudioRecBtn.disabled = true;
        stopAudioRecBtn.disabled = false;
      })
      .catch(() => alert("Microphone inaccessible."));
  };

  stopAudioRecBtn.onclick = () => {
    if(mediaRecorderAudio && mediaRecorderAudio.state !== "inactive"){
      mediaRecorderAudio.stop();
      startAudioRecBtn.disabled = false;
      stopAudioRecBtn.disabled = true;
    }
  };

  // MediaRecorder video
  startVideoRecBtn.onclick = () => {
    navigator.mediaDevices.getUserMedia({audio:true,video:true})
      .then(stream => {
        mediaRecorderVideo = new MediaRecorder(stream);
        videoChunks = [];
        mediaRecorderVideo.ondataavailable = e => {
          videoChunks.push(e.data);
        };
        mediaRecorderVideo.onstop = e => {
          const blob = new Blob(videoChunks, {type:'video/webm'});
          const reader = new FileReader();
          reader.onload = e => {
            addFile("video_enregistree.webm","video/webm", e.target.result);
          };
          reader.readAsDataURL(blob);
          stream.getTracks().forEach(t => t.stop());
        };
        mediaRecorderVideo.start();
        startVideoRecBtn.disabled = true;
        stopVideoRecBtn.disabled = false;
      })
      .catch(() => alert("Caméra/microphone inaccessible."));
  };

  stopVideoRecBtn.onclick = () => {
    if(mediaRecorderVideo && mediaRecorderVideo.state !== "inactive"){
      mediaRecorderVideo.stop();
      startVideoRecBtn.disabled = false;
      stopVideoRecBtn.disabled = true;
    }
  };

  // On page load - parse URL param to restore
  function restoreFromUrl() {
    const params = new URLSearchParams(window.location.search);
    const dataStr = params.get("data");
    if(!dataStr) return;
    try {
      const data = JSON.parse(decodeURIComponent(dataStr));
      if(data.text) textInput.value = data.text;
      if(Array.isArray(data.files)){
        filesData = data.files;
        renderFilesList();
      }
      updateShareLink();
    } catch {}
  }

  restoreFromUrl();

  // Initial update share link
  updateShareLink();
})();
</script>
